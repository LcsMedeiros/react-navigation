{"version":3,"sources":["TouchableItem.native.tsx"],"names":["React","Platform","TouchableNativeFeedback","TouchableOpacity","View","BorderlessButton","ANDROID_VERSION_LOLLIPOP","TouchableItem","Component","render","OS","Version","props","style","pressColor","borderless","children","rest","canUseNativeForeground","Ripple","Children","only","top","bottom","right","left","disabled"],"mappings":";;;;;;;;AAAA;;;;;;;;;AASA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SACEC,QADF,EAEEC,uBAFF,EAGEC,gBAHF,EAIEC,IAJF,QAMO,cANP;AAQA,OAAOC,gBAAP,MAA6B,oBAA7B;AAWA,MAAMC,wBAAwB,GAAG,EAAjC;AAEA,OAAO,MAAMC,aAAN,SAA4BP,KAAK,CAACQ,SAAlC,CAAmD;AAMxDC,EAAAA,MAAM,GAAG;AACP;;;;;;;;AAQA,QACER,QAAQ,CAACS,EAAT,KAAgB,SAAhB,IACAT,QAAQ,CAACU,OAAT,IAAoBL,wBAFtB,EAGE;AACA,0BAA6D,KAAKM,KAAlE;AAAA,YAAM;AAAEC,QAAAA,KAAF;AAASC,QAAAA,UAAT;AAAqBC,QAAAA,UAArB;AAAiCC,QAAAA;AAAjC,OAAN;AAAA,YAAoDC,IAApD;;AAEA,0BACE,oBAAC,uBAAD,eACMA,IADN;AAEE,QAAA,aAAa,EAAEf,uBAAuB,CAACgB,sBAAxB,EAFjB;AAGE,QAAA,UAAU,EAAEhB,uBAAuB,CAACiB,MAAxB,CAA+BL,UAA/B,EAA2CC,UAA3C;AAHd,uBAKE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEF;AAAb,SAAqBb,KAAK,CAACoB,QAAN,CAAeC,IAAf,CAAoBL,QAApB,CAArB,CALF,CADF;AASD,KAfD,MAeO,IAAIf,QAAQ,CAACS,EAAT,KAAgB,KAApB,EAA2B;AAChC,0BACE,oBAAC,gBAAD;AACE,QAAA,OAAO,EAAE;AAAEY,UAAAA,GAAG,EAAE,EAAP;AAAWC,UAAAA,MAAM,EAAE,EAAnB;AAAuBC,UAAAA,KAAK,EAAE,EAA9B;AAAkCC,UAAAA,IAAI,EAAE;AAAxC,SADX;AAEE,QAAA,oBAAoB,MAFtB;AAGE,QAAA,OAAO,EAAE,CAAC,KAAKb,KAAL,CAAWc;AAHvB,SAIM,KAAKd,KAJX,GAMG,KAAKA,KAAL,CAAWI,QANd,CADF;AAUD,KAXM,MAWA;AACL,0BACE,oBAAC,gBAAD,EAAsB,KAAKJ,KAA3B,EACG,KAAKA,KAAL,CAAWI,QADd,CADF;AAKD;AACF;;AAhDuD;;gBAA7CT,a,kBACW;AACpBQ,EAAAA,UAAU,EAAE,KADQ;AAEpBD,EAAAA,UAAU,EAAE;AAFQ,C","sourcesContent":["/**\r\n * TouchableItem renders a touchable that looks native on both iOS and Android.\r\n *\r\n * It provides an abstraction on top of TouchableNativeFeedback and\r\n * TouchableOpacity.\r\n *\r\n * On iOS you can pass the props of TouchableOpacity, on Android pass the props\r\n * of TouchableNativeFeedback.\r\n */\r\nimport * as React from 'react';\r\nimport {\r\n  Platform,\r\n  TouchableNativeFeedback,\r\n  TouchableOpacity,\r\n  View,\r\n  ViewProps,\r\n} from 'react-native';\r\n\r\nimport BorderlessButton from './BorderlessButton';\r\n\r\nexport type Props = ViewProps & {\r\n  pressColor: string;\r\n  disabled?: boolean;\r\n  borderless?: boolean;\r\n  delayPressIn?: number;\r\n  onPress?: () => void;\r\n  children: React.ReactNode;\r\n};\r\n\r\nconst ANDROID_VERSION_LOLLIPOP = 21;\r\n\r\nexport class TouchableItem extends React.Component<Props> {\r\n  static defaultProps = {\r\n    borderless: false,\r\n    pressColor: 'rgba(0, 0, 0, .32)',\r\n  };\r\n\r\n  render() {\r\n    /*\r\n     * TouchableNativeFeedback.Ripple causes a crash on old Android versions,\r\n     * therefore only enable it on Android Lollipop and above.\r\n     *\r\n     * All touchables on Android should have the ripple effect according to\r\n     * platform design guidelines.\r\n     * We need to pass the background prop to specify a borderless ripple effect.\r\n     */\r\n    if (\r\n      Platform.OS === 'android' &&\r\n      Platform.Version >= ANDROID_VERSION_LOLLIPOP\r\n    ) {\r\n      const { style, pressColor, borderless, children, ...rest } = this.props;\r\n\r\n      return (\r\n        <TouchableNativeFeedback\r\n          {...rest}\r\n          useForeground={TouchableNativeFeedback.canUseNativeForeground()}\r\n          background={TouchableNativeFeedback.Ripple(pressColor, borderless)}\r\n        >\r\n          <View style={style}>{React.Children.only(children)}</View>\r\n        </TouchableNativeFeedback>\r\n      );\r\n    } else if (Platform.OS === 'ios') {\r\n      return (\r\n        <BorderlessButton\r\n          hitSlop={{ top: 10, bottom: 10, right: 10, left: 10 }}\r\n          disallowInterruption\r\n          enabled={!this.props.disabled}\r\n          {...this.props}\r\n        >\r\n          {this.props.children}\r\n        </BorderlessButton>\r\n      );\r\n    } else {\r\n      return (\r\n        <TouchableOpacity {...this.props}>\r\n          {this.props.children}\r\n        </TouchableOpacity>\r\n      );\r\n    }\r\n  }\r\n}\r\n"]}