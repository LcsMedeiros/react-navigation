{"version":3,"sources":["CardStack.tsx"],"names":["React","Animated","StyleSheet","Dimensions","Platform","MaybeScreenContainer","MaybeScreen","getDefaultHeaderHeight","CardContainer","DefaultTransition","ModalTransition","forNoAnimation","forNoAnimationHeader","forNoAnimationCard","getDistanceForDirection","EPSILON","FALLBACK_DESCRIPTOR","Object","freeze","options","getHeaderHeights","routes","insets","descriptors","layout","previous","reduce","acc","curr","key","height","flatten","headerStyle","safeAreaInsets","headerStatusBarHeight","top","getDistanceFromOptions","mode","descriptor","gestureDirection","getProgressFromGesture","gesture","distance","width","Math","max","interpolate","inputRange","outputRange","CardStack","Component","getDerivedStateFromProps","props","state","gestures","animationEnabled","Value","openingRouteKeys","includes","scenes","map","route","index","self","previousRoute","nextRoute","oldScene","currentGesture","previousGesture","undefined","nextGesture","nextDescriptor","previousDescriptor","scene","progress","current","next","__memo","every","it","i","headerHeights","constructor","e","nativeEvent","setState","previousHeight","get","render","closingRouteKeys","onOpenRoute","onCloseRoute","getPreviousRoute","getGesturesEnabled","renderHeader","renderScene","headerMode","onTransitionStart","onTransitionEnd","onPageChangeStart","onPageChangeConfirm","onPageChangeCancel","focusedRoute","focusedDescriptor","focusedOptions","defaultTransitionPreset","headerStyleInterpolator","right","bottom","left","isScreensEnabled","OS","styles","container","handleLayout","focused","isScreenActive","extrapolate","headerShown","headerTransparent","cardShadowEnabled","cardOverlayEnabled","cardOverlay","cardStyle","gestureResponseDistance","gestureVelocityImpact","transitionSpec","cardStyleInterpolator","transitionConfig","length","nextScene","safeAreaInsetTop","safeAreaInsetRight","safeAreaInsetBottom","safeAreaInsetLeft","previousScene","j","s","absoluteFill","handleHeaderLayout","getFocusedRoute","onContentHeightChange","styleInterpolator","style","floating","create","flex","position"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  Animated,\r\n  StyleSheet,\r\n  LayoutChangeEvent,\r\n  Dimensions,\r\n  Platform,\r\n} from 'react-native';\r\nimport { EdgeInsets } from 'react-native-safe-area-context';\r\nimport { Route, StackNavigationState } from '@react-navigation/native';\r\n\r\nimport { MaybeScreenContainer, MaybeScreen } from '../Screens';\r\nimport { getDefaultHeaderHeight } from '../Header/HeaderSegment';\r\nimport { Props as HeaderContainerProps } from '../Header/HeaderContainer';\r\nimport CardContainer from './CardContainer';\r\nimport {\r\n  DefaultTransition,\r\n  ModalTransition,\r\n} from '../../TransitionConfigs/TransitionPresets';\r\nimport { forNoAnimation as forNoAnimationHeader } from '../../TransitionConfigs/HeaderStyleInterpolators';\r\nimport { forNoAnimation as forNoAnimationCard } from '../../TransitionConfigs/CardStyleInterpolators';\r\nimport getDistanceForDirection from '../../utils/getDistanceForDirection';\r\nimport {\r\n  Layout,\r\n  StackHeaderMode,\r\n  StackCardMode,\r\n  Scene,\r\n  StackDescriptorMap,\r\n  StackNavigationOptions,\r\n  StackDescriptor,\r\n} from '../../types';\r\n\r\ntype GestureValues = {\r\n  [key: string]: Animated.Value;\r\n};\r\n\r\ntype Props = {\r\n  mode: StackCardMode;\r\n  insets: EdgeInsets;\r\n  state: StackNavigationState;\r\n  descriptors: StackDescriptorMap;\r\n  routes: Route<string>[];\r\n  openingRouteKeys: string[];\r\n  closingRouteKeys: string[];\r\n  onOpenRoute: (props: { route: Route<string> }) => void;\r\n  onCloseRoute: (props: { route: Route<string> }) => void;\r\n  getPreviousRoute: (props: {\r\n    route: Route<string>;\r\n  }) => Route<string> | undefined;\r\n  getGesturesEnabled: (props: { route: Route<string> }) => boolean;\r\n  renderHeader: (props: HeaderContainerProps) => React.ReactNode;\r\n  renderScene: (props: { route: Route<string> }) => React.ReactNode;\r\n  headerMode: StackHeaderMode;\r\n  onTransitionStart: (\r\n    props: { route: Route<string> },\r\n    closing: boolean\r\n  ) => void;\r\n  onTransitionEnd: (props: { route: Route<string> }, closing: boolean) => void;\r\n  onPageChangeStart?: () => void;\r\n  onPageChangeConfirm?: () => void;\r\n  onPageChangeCancel?: () => void;\r\n};\r\n\r\ntype State = {\r\n  routes: Route<string>[];\r\n  descriptors: StackDescriptorMap;\r\n  scenes: Scene<Route<string>>[];\r\n  gestures: GestureValues;\r\n  layout: Layout;\r\n  headerHeights: Record<string, number>;\r\n};\r\n\r\nconst EPSILON = 0.01;\r\n\r\nconst FALLBACK_DESCRIPTOR = Object.freeze({ options: {} });\r\n\r\nconst getHeaderHeights = (\r\n  routes: Route<string>[],\r\n  insets: EdgeInsets,\r\n  descriptors: StackDescriptorMap,\r\n  layout: Layout,\r\n  previous: Record<string, number>\r\n) => {\r\n  return routes.reduce<Record<string, number>>((acc, curr) => {\r\n    const { options = {} } = descriptors[curr.key] || {};\r\n    const { height = previous[curr.key] } = StyleSheet.flatten(\r\n      options.headerStyle || {}\r\n    );\r\n\r\n    const safeAreaInsets = {\r\n      ...insets,\r\n      ...options.safeAreaInsets,\r\n    };\r\n\r\n    const { headerStatusBarHeight = safeAreaInsets.top } = options;\r\n\r\n    acc[curr.key] =\r\n      typeof height === 'number'\r\n        ? height\r\n        : getDefaultHeaderHeight(layout, headerStatusBarHeight);\r\n\r\n    return acc;\r\n  }, {});\r\n};\r\n\r\nconst getDistanceFromOptions = (\r\n  mode: StackCardMode,\r\n  layout: Layout,\r\n  descriptor?: StackDescriptor\r\n) => {\r\n  const {\r\n    gestureDirection = mode === 'modal'\r\n      ? ModalTransition.gestureDirection\r\n      : DefaultTransition.gestureDirection,\r\n  } = descriptor?.options || {};\r\n\r\n  return getDistanceForDirection(layout, gestureDirection);\r\n};\r\n\r\nconst getProgressFromGesture = (\r\n  mode: StackCardMode,\r\n  gesture: Animated.Value,\r\n  layout: Layout,\r\n  descriptor?: StackDescriptor\r\n) => {\r\n  const distance = getDistanceFromOptions(\r\n    mode,\r\n    {\r\n      // Make sure that we have a non-zero distance, otherwise there will be incorrect progress\r\n      // This causes blank screen on web if it was previously inside container with display: none\r\n      width: Math.max(1, layout.width),\r\n      height: Math.max(1, layout.height),\r\n    },\r\n    descriptor\r\n  );\r\n\r\n  if (distance > 0) {\r\n    return gesture.interpolate({\r\n      inputRange: [0, distance],\r\n      outputRange: [1, 0],\r\n    });\r\n  }\r\n\r\n  return gesture.interpolate({\r\n    inputRange: [distance, 0],\r\n    outputRange: [0, 1],\r\n  });\r\n};\r\n\r\nexport default class CardStack extends React.Component<Props, State> {\r\n  static getDerivedStateFromProps(props: Props, state: State) {\r\n    if (\r\n      props.routes === state.routes &&\r\n      props.descriptors === state.descriptors\r\n    ) {\r\n      return null;\r\n    }\r\n\r\n    const gestures = props.routes.reduce<GestureValues>((acc, curr) => {\r\n      const descriptor = props.descriptors[curr.key];\r\n      const { animationEnabled } = descriptor?.options || {};\r\n\r\n      acc[curr.key] =\r\n        state.gestures[curr.key] ||\r\n        new Animated.Value(\r\n          props.openingRouteKeys.includes(curr.key) &&\r\n          animationEnabled !== false\r\n            ? getDistanceFromOptions(props.mode, state.layout, descriptor)\r\n            : 0\r\n        );\r\n\r\n      return acc;\r\n    }, {});\r\n\r\n    return {\r\n      routes: props.routes,\r\n      scenes: props.routes.map((route, index, self) => {\r\n        const previousRoute = self[index - 1];\r\n        const nextRoute = self[index + 1];\r\n\r\n        const oldScene = state.scenes[index];\r\n\r\n        const currentGesture = gestures[route.key];\r\n        const previousGesture = previousRoute\r\n          ? gestures[previousRoute.key]\r\n          : undefined;\r\n        const nextGesture = nextRoute ? gestures[nextRoute.key] : undefined;\r\n\r\n        const descriptor =\r\n          props.descriptors[route.key] ||\r\n          state.descriptors[route.key] ||\r\n          (oldScene ? oldScene.descriptor : FALLBACK_DESCRIPTOR);\r\n\r\n        const nextDescriptor =\r\n          props.descriptors[nextRoute?.key] ||\r\n          state.descriptors[nextRoute?.key];\r\n\r\n        const previousDescriptor =\r\n          props.descriptors[previousRoute?.key] ||\r\n          state.descriptors[previousRoute?.key];\r\n\r\n        const scene = {\r\n          route,\r\n          descriptor,\r\n          progress: {\r\n            current: getProgressFromGesture(\r\n              props.mode,\r\n              currentGesture,\r\n              state.layout,\r\n              descriptor\r\n            ),\r\n            next: nextGesture\r\n              ? getProgressFromGesture(\r\n                  props.mode,\r\n                  nextGesture,\r\n                  state.layout,\r\n                  nextDescriptor\r\n                )\r\n              : undefined,\r\n            previous: previousGesture\r\n              ? getProgressFromGesture(\r\n                  props.mode,\r\n                  previousGesture,\r\n                  state.layout,\r\n                  previousDescriptor\r\n                )\r\n              : undefined,\r\n          },\r\n          __memo: [\r\n            route,\r\n            state.layout,\r\n            descriptor,\r\n            nextDescriptor,\r\n            previousDescriptor,\r\n            currentGesture,\r\n            nextGesture,\r\n            previousGesture,\r\n          ],\r\n        };\r\n\r\n        if (\r\n          oldScene &&\r\n          scene.__memo.every((it, i) => {\r\n            // @ts-ignore\r\n            return oldScene.__memo[i] === it;\r\n          })\r\n        ) {\r\n          return oldScene;\r\n        }\r\n\r\n        return scene;\r\n      }),\r\n      gestures,\r\n      descriptors: props.descriptors,\r\n      headerHeights: getHeaderHeights(\r\n        props.routes,\r\n        props.insets,\r\n        state.descriptors,\r\n        state.layout,\r\n        state.headerHeights\r\n      ),\r\n    };\r\n  }\r\n\r\n  constructor(props: Props) {\r\n    super(props);\r\n\r\n    const { height = 0, width = 0 } = Dimensions.get('window');\r\n\r\n    this.state = {\r\n      routes: [],\r\n      scenes: [],\r\n      gestures: {},\r\n      layout: { height, width },\r\n      descriptors: this.props.descriptors,\r\n      // Used when card's header is null and mode is float to make transition\r\n      // between screens with headers and those without headers smooth.\r\n      // This is not a great heuristic here. We don't know synchronously\r\n      // on mount what the header height is so we have just used the most\r\n      // common cases here.\r\n      headerHeights: {},\r\n    };\r\n  }\r\n\r\n  private handleLayout = (e: LayoutChangeEvent) => {\r\n    const { height, width } = e.nativeEvent.layout;\r\n\r\n    const layout = { width, height };\r\n\r\n    this.setState((state, props) => {\r\n      if (height === state.layout.height && width === state.layout.width) {\r\n        return null;\r\n      }\r\n\r\n      return {\r\n        layout,\r\n        headerHeights: getHeaderHeights(\r\n          props.routes,\r\n          props.insets,\r\n          state.descriptors,\r\n          layout,\r\n          state.headerHeights\r\n        ),\r\n      };\r\n    });\r\n  };\r\n\r\n  private handleHeaderLayout = ({\r\n    route,\r\n    height,\r\n  }: {\r\n    route: Route<string>;\r\n    height: number;\r\n  }) => {\r\n    this.setState(({ headerHeights }) => {\r\n      const previousHeight = headerHeights[route.key];\r\n\r\n      if (previousHeight === height) {\r\n        return null;\r\n      }\r\n\r\n      return {\r\n        headerHeights: {\r\n          ...headerHeights,\r\n          [route.key]: height,\r\n        },\r\n      };\r\n    });\r\n  };\r\n\r\n  private getFocusedRoute = () => {\r\n    const { state } = this.props;\r\n\r\n    return state.routes[state.index];\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      mode,\r\n      insets,\r\n      descriptors,\r\n      state,\r\n      routes,\r\n      closingRouteKeys,\r\n      onOpenRoute,\r\n      onCloseRoute,\r\n      getPreviousRoute,\r\n      getGesturesEnabled,\r\n      renderHeader,\r\n      renderScene,\r\n      headerMode,\r\n      onTransitionStart,\r\n      onTransitionEnd,\r\n      onPageChangeStart,\r\n      onPageChangeConfirm,\r\n      onPageChangeCancel,\r\n    } = this.props;\r\n\r\n    const { scenes, layout, gestures, headerHeights } = this.state;\r\n\r\n    const focusedRoute = state.routes[state.index];\r\n    const focusedDescriptor = descriptors[focusedRoute.key];\r\n    const focusedOptions = focusedDescriptor ? focusedDescriptor.options : {};\r\n\r\n    let defaultTransitionPreset =\r\n      mode === 'modal' ? ModalTransition : DefaultTransition;\r\n\r\n    if (headerMode === 'screen') {\r\n      defaultTransitionPreset = {\r\n        ...defaultTransitionPreset,\r\n        headerStyleInterpolator: forNoAnimationHeader,\r\n      };\r\n    }\r\n\r\n    const {\r\n      top = insets.top,\r\n      right = insets.right,\r\n      bottom = insets.bottom,\r\n      left = insets.left,\r\n    } = focusedOptions.safeAreaInsets || {};\r\n\r\n    // Screens is buggy on iOS and web, so we only enable it on Android\r\n    // For modals, usually we want the screen underneath to be visible, so also disable it there\r\n    const isScreensEnabled = Platform.OS !== 'ios' && mode !== 'modal';\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <MaybeScreenContainer\r\n          enabled={isScreensEnabled}\r\n          style={styles.container}\r\n          onLayout={this.handleLayout}\r\n        >\r\n          {routes.map((route, index, self) => {\r\n            const focused = focusedRoute.key === route.key;\r\n            const gesture = gestures[route.key];\r\n            const scene = scenes[index];\r\n\r\n            const isScreenActive = scene.progress.next\r\n              ? scene.progress.next.interpolate({\r\n                  inputRange: [0, 1 - EPSILON, 1],\r\n                  outputRange: [1, 1, 0],\r\n                  extrapolate: 'clamp',\r\n                })\r\n              : 1;\r\n\r\n            const {\r\n              safeAreaInsets,\r\n              headerShown,\r\n              headerTransparent,\r\n              cardShadowEnabled,\r\n              cardOverlayEnabled,\r\n              cardOverlay,\r\n              cardStyle,\r\n              animationEnabled,\r\n              gestureResponseDistance,\r\n              gestureVelocityImpact,\r\n              gestureDirection = defaultTransitionPreset.gestureDirection,\r\n              transitionSpec = defaultTransitionPreset.transitionSpec,\r\n              cardStyleInterpolator = animationEnabled === false\r\n                ? forNoAnimationCard\r\n                : defaultTransitionPreset.cardStyleInterpolator,\r\n              headerStyleInterpolator = defaultTransitionPreset.headerStyleInterpolator,\r\n            } = scene.descriptor\r\n              ? scene.descriptor.options\r\n              : ({} as StackNavigationOptions);\r\n\r\n            let transitionConfig = {\r\n              gestureDirection,\r\n              transitionSpec,\r\n              cardStyleInterpolator,\r\n              headerStyleInterpolator,\r\n            };\r\n\r\n            // When a screen is not the last, it should use next screen's transition config\r\n            // Many transitions also animate the previous screen, so using 2 different transitions doesn't look right\r\n            // For example combining a slide and a modal transition would look wrong otherwise\r\n            // With this approach, combining different transition styles in the same navigator mostly looks right\r\n            // This will still be broken when 2 transitions have different idle state (e.g. modal presentation),\r\n            // but majority of the transitions look alright\r\n            if (index !== self.length - 1) {\r\n              const nextScene = scenes[index + 1];\r\n\r\n              if (nextScene) {\r\n                const {\r\n                  animationEnabled,\r\n                  gestureDirection = defaultTransitionPreset.gestureDirection,\r\n                  transitionSpec = defaultTransitionPreset.transitionSpec,\r\n                  cardStyleInterpolator = animationEnabled === false\r\n                    ? forNoAnimationCard\r\n                    : defaultTransitionPreset.cardStyleInterpolator,\r\n                  headerStyleInterpolator = defaultTransitionPreset.headerStyleInterpolator,\r\n                } = nextScene.descriptor\r\n                  ? nextScene.descriptor.options\r\n                  : ({} as StackNavigationOptions);\r\n\r\n                transitionConfig = {\r\n                  gestureDirection,\r\n                  transitionSpec,\r\n                  cardStyleInterpolator,\r\n                  headerStyleInterpolator,\r\n                };\r\n              }\r\n            }\r\n\r\n            const {\r\n              top: safeAreaInsetTop = insets.top,\r\n              right: safeAreaInsetRight = insets.right,\r\n              bottom: safeAreaInsetBottom = insets.bottom,\r\n              left: safeAreaInsetLeft = insets.left,\r\n            } = safeAreaInsets || {};\r\n\r\n            const previousRoute = getPreviousRoute({ route: scene.route });\r\n\r\n            let previousScene = scenes[index - 1];\r\n\r\n            if (previousRoute) {\r\n              // The previous scene will be shortly before the current scene in the array\r\n              // So loop back from current index to avoid looping over the full array\r\n              for (let j = index - 1; j >= 0; j--) {\r\n                const s = scenes[j];\r\n\r\n                if (s && s.route.key === previousRoute.key) {\r\n                  previousScene = s;\r\n                  break;\r\n                }\r\n              }\r\n            }\r\n\r\n            return (\r\n              <MaybeScreen\r\n                key={route.key}\r\n                style={StyleSheet.absoluteFill}\r\n                enabled={isScreensEnabled}\r\n                active={isScreenActive}\r\n                pointerEvents=\"box-none\"\r\n              >\r\n                <CardContainer\r\n                  index={index}\r\n                  active={index === self.length - 1}\r\n                  focused={focused}\r\n                  closing={closingRouteKeys.includes(route.key)}\r\n                  layout={layout}\r\n                  gesture={gesture}\r\n                  scene={scene}\r\n                  previousScene={previousScene}\r\n                  safeAreaInsetTop={safeAreaInsetTop}\r\n                  safeAreaInsetRight={safeAreaInsetRight}\r\n                  safeAreaInsetBottom={safeAreaInsetBottom}\r\n                  safeAreaInsetLeft={safeAreaInsetLeft}\r\n                  cardOverlay={cardOverlay}\r\n                  cardOverlayEnabled={cardOverlayEnabled}\r\n                  cardShadowEnabled={cardShadowEnabled}\r\n                  cardStyle={cardStyle}\r\n                  onPageChangeStart={onPageChangeStart}\r\n                  onPageChangeConfirm={onPageChangeConfirm}\r\n                  onPageChangeCancel={onPageChangeCancel}\r\n                  gestureResponseDistance={gestureResponseDistance}\r\n                  headerHeight={headerHeights[route.key]}\r\n                  onHeaderHeightChange={this.handleHeaderLayout}\r\n                  getPreviousRoute={getPreviousRoute}\r\n                  getFocusedRoute={this.getFocusedRoute}\r\n                  mode={mode}\r\n                  headerMode={headerMode}\r\n                  headerShown={headerShown}\r\n                  headerTransparent={headerTransparent}\r\n                  renderHeader={renderHeader}\r\n                  renderScene={renderScene}\r\n                  onOpenRoute={onOpenRoute}\r\n                  onCloseRoute={onCloseRoute}\r\n                  onTransitionStart={onTransitionStart}\r\n                  onTransitionEnd={onTransitionEnd}\r\n                  gestureEnabled={index !== 0 && getGesturesEnabled({ route })}\r\n                  gestureVelocityImpact={gestureVelocityImpact}\r\n                  {...transitionConfig}\r\n                />\r\n              </MaybeScreen>\r\n            );\r\n          })}\r\n        </MaybeScreenContainer>\r\n        {headerMode === 'float'\r\n          ? renderHeader({\r\n              mode: 'float',\r\n              layout,\r\n              insets: { top, right, bottom, left },\r\n              scenes,\r\n              getPreviousRoute,\r\n              getFocusedRoute: this.getFocusedRoute,\r\n              onContentHeightChange: this.handleHeaderLayout,\r\n              gestureDirection:\r\n                focusedOptions.gestureDirection !== undefined\r\n                  ? focusedOptions.gestureDirection\r\n                  : defaultTransitionPreset.gestureDirection,\r\n              styleInterpolator:\r\n                focusedOptions.headerStyleInterpolator !== undefined\r\n                  ? focusedOptions.headerStyleInterpolator\r\n                  : defaultTransitionPreset.headerStyleInterpolator,\r\n              style: styles.floating,\r\n            })\r\n          : null}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n  },\r\n  floating: {\r\n    position: 'absolute',\r\n    top: 0,\r\n    left: 0,\r\n    right: 0,\r\n  },\r\n});\r\n"]}