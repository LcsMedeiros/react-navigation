{"version":3,"sources":["MaskedView.native.tsx"],"names":["RNCMaskedView","require","default","e","isMaskedViewAvailable","UIManager","getViewManagerConfig","MaskedView","children","rest"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;;;AAQA,IAAIA,aAAJ;;AAEA,IAAI;AACFA,EAAAA,aAAa,GAAGC,OAAO,CAAC,qCAAD,CAAP,CAA+CC,OAA/D;AACD,CAFD,CAEE,OAAOC,CAAP,EAAU,CACV;AACD;;AAED,MAAMC,qBAAqB,GACzB;AACAC,uBAAUC,oBAAV,CAA+B,eAA/B,KAAmD,IAFrD;;AAIe,SAASC,UAAT,OAAkD;AAAA,MAA9B;AAAEC,IAAAA;AAAF,GAA8B;AAAA,MAAfC,IAAe;;AAC/D,MAAIL,qBAAqB,IAAIJ,aAA7B,EAA4C;AAC1C,wBAAO,oBAAC,aAAD,EAAmBS,IAAnB,EAA0BD,QAA1B,CAAP;AACD;;AAED,SAAOA,QAAP;AACD","sourcesContent":["import * as React from 'react';\r\nimport { UIManager } from 'react-native';\r\n\r\ntype MaskedViewType = typeof import('@react-native-community/masked-view').default;\r\n\r\ntype Props = React.ComponentProps<MaskedViewType> & {\r\n  children: React.ReactElement;\r\n};\r\n\r\nlet RNCMaskedView: MaskedViewType | undefined;\r\n\r\ntry {\r\n  RNCMaskedView = require('@react-native-community/masked-view').default;\r\n} catch (e) {\r\n  // Ignore\r\n}\r\n\r\nconst isMaskedViewAvailable =\r\n  // @ts-ignore\r\n  UIManager.getViewManagerConfig('RNCMaskedView') != null;\r\n\r\nexport default function MaskedView({ children, ...rest }: Props) {\r\n  if (isMaskedViewAvailable && RNCMaskedView) {\r\n    return <RNCMaskedView {...rest}>{children}</RNCMaskedView>;\r\n  }\r\n\r\n  return children;\r\n}\r\n"]}