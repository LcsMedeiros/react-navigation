{"version":3,"sources":["CardContainer.tsx"],"names":["EPSILON","CardContainer","active","cardOverlay","cardOverlayEnabled","cardShadowEnabled","cardStyle","cardStyleInterpolator","closing","gesture","focused","gestureDirection","gestureEnabled","gestureResponseDistance","gestureVelocityImpact","getPreviousRoute","getFocusedRoute","mode","headerMode","headerShown","headerStyleInterpolator","headerTransparent","headerHeight","onHeaderHeightChange","index","layout","onCloseRoute","onOpenRoute","onPageChangeCancel","onPageChangeConfirm","onPageChangeStart","onTransitionEnd","onTransitionStart","previousScene","renderHeader","renderScene","safeAreaInsetBottom","safeAreaInsetLeft","safeAreaInsetRight","safeAreaInsetTop","scene","transitionSpec","React","useEffect","handleOpen","route","handleClose","handleTransitionStart","insets","top","right","bottom","left","colors","pointerEvents","setPointerEvents","useState","listener","progress","next","addListener","value","removeListener","current","marginTop","backgroundColor","background","StyleSheet","absoluteFill","styles","container","scenes","styleInterpolator","onContentHeightChange","memo","create","flex","flexDirection"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport { Animated, View, StyleSheet, StyleProp, ViewStyle } from 'react-native';\r\nimport { Route, useTheme } from '@react-navigation/native';\r\nimport { Props as HeaderContainerProps } from '../Header/HeaderContainer';\r\nimport Card from './Card';\r\nimport HeaderHeightContext from '../../utils/HeaderHeightContext';\r\nimport {\r\n  Scene,\r\n  Layout,\r\n  StackHeaderMode,\r\n  StackCardMode,\r\n  TransitionPreset,\r\n} from '../../types';\r\n\r\ntype Props = TransitionPreset & {\r\n  index: number;\r\n  active: boolean;\r\n  focused: boolean;\r\n  closing: boolean;\r\n  layout: Layout;\r\n  gesture: Animated.Value;\r\n  previousScene?: Scene<Route<string>>;\r\n  scene: Scene<Route<string>>;\r\n  safeAreaInsetTop: number;\r\n  safeAreaInsetRight: number;\r\n  safeAreaInsetBottom: number;\r\n  safeAreaInsetLeft: number;\r\n  cardOverlay?: (props: { style: StyleProp<ViewStyle> }) => React.ReactNode;\r\n  cardOverlayEnabled?: boolean;\r\n  cardShadowEnabled?: boolean;\r\n  cardStyle?: StyleProp<ViewStyle>;\r\n  getPreviousRoute: (props: {\r\n    route: Route<string>;\r\n  }) => Route<string> | undefined;\r\n  getFocusedRoute: () => Route<string>;\r\n  renderHeader: (props: HeaderContainerProps) => React.ReactNode;\r\n  renderScene: (props: { route: Route<string> }) => React.ReactNode;\r\n  onOpenRoute: (props: { route: Route<string> }) => void;\r\n  onCloseRoute: (props: { route: Route<string> }) => void;\r\n  onTransitionStart?: (\r\n    props: { route: Route<string> },\r\n    closing: boolean\r\n  ) => void;\r\n  onTransitionEnd?: (props: { route: Route<string> }, closing: boolean) => void;\r\n  onPageChangeStart?: () => void;\r\n  onPageChangeConfirm?: () => void;\r\n  onPageChangeCancel?: () => void;\r\n  gestureEnabled?: boolean;\r\n  gestureResponseDistance?: {\r\n    vertical?: number;\r\n    horizontal?: number;\r\n  };\r\n  gestureVelocityImpact?: number;\r\n  mode: StackCardMode;\r\n  headerMode: StackHeaderMode;\r\n  headerShown?: boolean;\r\n  headerTransparent?: boolean;\r\n  headerHeight: number;\r\n  onHeaderHeightChange: (props: {\r\n    route: Route<string>;\r\n    height: number;\r\n  }) => void;\r\n};\r\n\r\nconst EPSILON = 0.1;\r\n\r\nfunction CardContainer({\r\n  active,\r\n  cardOverlay,\r\n  cardOverlayEnabled,\r\n  cardShadowEnabled,\r\n  cardStyle,\r\n  cardStyleInterpolator,\r\n  closing,\r\n  gesture,\r\n  focused,\r\n  gestureDirection,\r\n  gestureEnabled,\r\n  gestureResponseDistance,\r\n  gestureVelocityImpact,\r\n  getPreviousRoute,\r\n  getFocusedRoute,\r\n  mode,\r\n  headerMode,\r\n  headerShown,\r\n  headerStyleInterpolator,\r\n  headerTransparent,\r\n  headerHeight,\r\n  onHeaderHeightChange,\r\n  index,\r\n  layout,\r\n  onCloseRoute,\r\n  onOpenRoute,\r\n  onPageChangeCancel,\r\n  onPageChangeConfirm,\r\n  onPageChangeStart,\r\n  onTransitionEnd,\r\n  onTransitionStart,\r\n  previousScene,\r\n  renderHeader,\r\n  renderScene,\r\n  safeAreaInsetBottom,\r\n  safeAreaInsetLeft,\r\n  safeAreaInsetRight,\r\n  safeAreaInsetTop,\r\n  scene,\r\n  transitionSpec,\r\n}: Props) {\r\n  React.useEffect(() => {\r\n    onPageChangeConfirm?.();\r\n  }, [active, onPageChangeConfirm]);\r\n\r\n  const handleOpen = () => {\r\n    onTransitionEnd?.({ route: scene.route }, false);\r\n    onOpenRoute({ route: scene.route });\r\n  };\r\n\r\n  const handleClose = () => {\r\n    onTransitionEnd?.({ route: scene.route }, true);\r\n    onCloseRoute({ route: scene.route });\r\n  };\r\n\r\n  const handleTransitionStart = ({ closing }: { closing: boolean }) => {\r\n    if (active && closing) {\r\n      onPageChangeConfirm?.();\r\n    } else {\r\n      onPageChangeCancel?.();\r\n    }\r\n\r\n    onTransitionStart?.({ route: scene.route }, closing);\r\n  };\r\n\r\n  const insets = {\r\n    top: safeAreaInsetTop,\r\n    right: safeAreaInsetRight,\r\n    bottom: safeAreaInsetBottom,\r\n    left: safeAreaInsetLeft,\r\n  };\r\n\r\n  const { colors } = useTheme();\r\n\r\n  const [pointerEvents, setPointerEvents] = React.useState<'box-none' | 'none'>(\r\n    'box-none'\r\n  );\r\n\r\n  React.useEffect(() => {\r\n    // `addListener` may not exist on web and older versions of React Native\r\n    // @ts-ignore\r\n    const listener = scene.progress.next?.addListener?.(\r\n      ({ value }: { value: number }) => {\r\n        setPointerEvents(value <= EPSILON ? 'box-none' : 'none');\r\n      }\r\n    );\r\n\r\n    return () => {\r\n      if (listener) {\r\n        // @ts-ignore\r\n        scene.progress.next?.removeListener?.(listener);\r\n      }\r\n    };\r\n  }, [pointerEvents, scene.progress.next]);\r\n\r\n  return (\r\n    <Card\r\n      index={index}\r\n      gestureDirection={gestureDirection}\r\n      layout={layout}\r\n      insets={insets}\r\n      gesture={gesture}\r\n      current={scene.progress.current}\r\n      next={scene.progress.next}\r\n      closing={closing}\r\n      onOpen={handleOpen}\r\n      onClose={handleClose}\r\n      overlay={cardOverlay}\r\n      overlayEnabled={cardOverlayEnabled}\r\n      shadowEnabled={cardShadowEnabled}\r\n      onTransitionStart={handleTransitionStart}\r\n      onGestureBegin={onPageChangeStart}\r\n      onGestureCanceled={onPageChangeCancel}\r\n      gestureEnabled={gestureEnabled}\r\n      gestureResponseDistance={gestureResponseDistance}\r\n      gestureVelocityImpact={gestureVelocityImpact}\r\n      transitionSpec={transitionSpec}\r\n      styleInterpolator={cardStyleInterpolator}\r\n      accessibilityElementsHidden={!focused}\r\n      importantForAccessibility={focused ? 'auto' : 'no-hide-descendants'}\r\n      pointerEvents={active ? 'box-none' : pointerEvents}\r\n      pageOverflowEnabled={headerMode === 'screen' && mode === 'card'}\r\n      containerStyle={\r\n        headerMode === 'float' && !headerTransparent && headerShown !== false\r\n          ? { marginTop: headerHeight }\r\n          : null\r\n      }\r\n      contentStyle={[{ backgroundColor: colors.background }, cardStyle]}\r\n      style={StyleSheet.absoluteFill}\r\n    >\r\n      <View style={styles.container}>\r\n        <View style={styles.scene}>\r\n          <HeaderHeightContext.Provider value={headerHeight}>\r\n            {renderScene({ route: scene.route })}\r\n          </HeaderHeightContext.Provider>\r\n        </View>\r\n        {headerMode === 'screen'\r\n          ? renderHeader({\r\n              mode: 'screen',\r\n              layout,\r\n              insets,\r\n              scenes: [previousScene, scene],\r\n              getPreviousRoute,\r\n              getFocusedRoute,\r\n              gestureDirection,\r\n              styleInterpolator: headerStyleInterpolator,\r\n              onContentHeightChange: onHeaderHeightChange,\r\n            })\r\n          : null}\r\n      </View>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default React.memo(CardContainer);\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    flexDirection: 'column-reverse',\r\n  },\r\n  scene: {\r\n    flex: 1,\r\n  },\r\n});\r\n"]}