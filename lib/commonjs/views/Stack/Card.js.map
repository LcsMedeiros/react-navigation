{"version":3,"sources":["Card.tsx"],"names":["GESTURE_VELOCITY_IMPACT","TRUE","FALSE","GESTURE_RESPONSE_DISTANCE_HORIZONTAL","GESTURE_RESPONSE_DISTANCE_VERTICAL","useNativeDriver","Platform","OS","Card","React","Component","Animated","Value","props","gestureDirection","width","layout","height","closing","velocity","gesture","transitionSpec","onOpen","onClose","onTransitionStart","toValue","getAnimateToValue","spec","close","open","animation","spring","timing","setPointerEventsEnabled","handleStartInteraction","clearTimeout","pendingGestureCallback","config","isInteraction","start","finished","handleEndInteraction","enabled","pointerEvents","contentRef","current","setNativeProps","interactionHandle","undefined","InteractionManager","createInteractionHandle","clearInteractionHandle","nativeEvent","onGestureBegin","onGestureCanceled","onGestureEnd","gestureVelocityImpact","state","GestureState","BEGAN","isSwiping","setValue","CANCELLED","velocityY","velocityX","animate","END","distance","translation","translationY","translationX","setTimeout","styleInterpolator","index","next","insetTop","insetRight","insetBottom","insetLeft","progress","isClosing","swiping","inverted","layouts","screen","insets","top","right","bottom","left","createRef","componentDidMount","componentDidUpdate","prevProps","componentWillUnmount","gestureActivationCriteria","gestureResponseDistance","vertical","horizontal","maxDeltaX","minOffsetY","hitSlop","invertedMultiplier","minOffsetX","maxDeltaY","render","overlay","overlayEnabled","shadowEnabled","gestureEnabled","pageOverflowEnabled","children","containerStyle","customContainerStyle","contentStyle","rest","interpolatedStyle","getInterpolatedStyle","animationContext","getCardAnimationContext","cardStyle","overlayStyle","shadowStyle","handleGestureEvent","event","backgroundColor","StyleSheet","flatten","isTransparent","alpha","absoluteFill","style","styles","container","handleGestureStateChange","shadow","shadowHorizontal","shadowLeft","shadowRight","shadowVertical","shadowTop","shadowBottom","create","flex","position","shadowRadius","shadowColor","shadowOpacity","shadowOffset"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  Animated,\r\n  View,\r\n  StyleSheet,\r\n  ViewProps,\r\n  StyleProp,\r\n  ViewStyle,\r\n  Platform,\r\n  InteractionManager,\r\n} from 'react-native';\r\nimport { EdgeInsets } from 'react-native-safe-area-context';\r\nimport Color from 'color';\r\n\r\nimport CardSheet from './CardSheet';\r\nimport {\r\n  PanGestureHandler,\r\n  GestureState,\r\n  PanGestureHandlerGestureEvent,\r\n} from '../GestureHandler';\r\nimport CardAnimationContext from '../../utils/CardAnimationContext';\r\nimport getDistanceForDirection from '../../utils/getDistanceForDirection';\r\nimport getInvertedMultiplier from '../../utils/getInvertedMultiplier';\r\nimport memoize from '../../utils/memoize';\r\nimport {\r\n  TransitionSpec,\r\n  StackCardStyleInterpolator,\r\n  GestureDirection,\r\n  Layout,\r\n} from '../../types';\r\n\r\ntype Props = ViewProps & {\r\n  index: number;\r\n  closing: boolean;\r\n  next?: Animated.AnimatedInterpolation;\r\n  current: Animated.AnimatedInterpolation;\r\n  gesture: Animated.Value;\r\n  layout: Layout;\r\n  insets: EdgeInsets;\r\n  pageOverflowEnabled: boolean;\r\n  gestureDirection: GestureDirection;\r\n  onOpen: () => void;\r\n  onClose: () => void;\r\n  onTransitionStart?: (props: { closing: boolean }) => void;\r\n  onGestureBegin?: () => void;\r\n  onGestureCanceled?: () => void;\r\n  onGestureEnd?: () => void;\r\n  children: React.ReactNode;\r\n  overlay: (props: { style: StyleProp<ViewStyle> }) => React.ReactNode;\r\n  overlayEnabled: boolean;\r\n  shadowEnabled: boolean;\r\n  gestureEnabled: boolean;\r\n  gestureResponseDistance?: {\r\n    vertical?: number;\r\n    horizontal?: number;\r\n  };\r\n  gestureVelocityImpact: number;\r\n  transitionSpec: {\r\n    open: TransitionSpec;\r\n    close: TransitionSpec;\r\n  };\r\n  styleInterpolator: StackCardStyleInterpolator;\r\n  containerStyle?: StyleProp<ViewStyle>;\r\n  contentStyle?: StyleProp<ViewStyle>;\r\n};\r\n\r\nconst GESTURE_VELOCITY_IMPACT = 0.3;\r\n\r\nconst TRUE = 1;\r\nconst FALSE = 0;\r\n\r\n/**\r\n * The distance of touch start from the edge of the screen where the gesture will be recognized\r\n */\r\nconst GESTURE_RESPONSE_DISTANCE_HORIZONTAL = 50;\r\nconst GESTURE_RESPONSE_DISTANCE_VERTICAL = 135;\r\n\r\nconst useNativeDriver = Platform.OS !== 'web';\r\n\r\nexport default class Card extends React.Component<Props> {\r\n  static defaultProps = {\r\n    overlayEnabled: Platform.OS !== 'ios',\r\n    shadowEnabled: true,\r\n    gestureEnabled: true,\r\n    gestureVelocityImpact: GESTURE_VELOCITY_IMPACT,\r\n    overlay: ({ style }: { style: StyleProp<ViewStyle> }) =>\r\n      style ? (\r\n        <Animated.View pointerEvents=\"none\" style={[styles.overlay, style]} />\r\n      ) : null,\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.animate({ closing: this.props.closing });\r\n  }\r\n\r\n  componentDidUpdate(prevProps: Props) {\r\n    const { layout, gestureDirection, closing } = this.props;\r\n    const { width, height } = layout;\r\n\r\n    if (width !== prevProps.layout.width) {\r\n      this.layout.width.setValue(width);\r\n    }\r\n\r\n    if (height !== prevProps.layout.height) {\r\n      this.layout.height.setValue(height);\r\n    }\r\n\r\n    if (gestureDirection !== prevProps.gestureDirection) {\r\n      this.inverted.setValue(getInvertedMultiplier(gestureDirection));\r\n    }\r\n\r\n    if (\r\n      this.getAnimateToValue(this.props) !== this.getAnimateToValue(prevProps)\r\n    ) {\r\n      // We need to trigger the animation when route was closed\r\n      // Thr route might have been closed by a `POP` action or by a gesture\r\n      // When route was closed due to a gesture, the animation would've happened already\r\n      // It's still important to trigger the animation so that `onClose` is called\r\n      // If `onClose` is not called, cleanup step won't be performed for gestures\r\n      this.animate({ closing });\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.handleEndInteraction();\r\n  }\r\n\r\n  private isClosing = new Animated.Value(FALSE);\r\n\r\n  private inverted = new Animated.Value(\r\n    getInvertedMultiplier(this.props.gestureDirection)\r\n  );\r\n\r\n  private layout = {\r\n    width: new Animated.Value(this.props.layout.width),\r\n    height: new Animated.Value(this.props.layout.height),\r\n  };\r\n\r\n  private isSwiping = new Animated.Value(FALSE);\r\n\r\n  private interactionHandle: number | undefined;\r\n\r\n  private pendingGestureCallback: number | undefined;\r\n\r\n  private animate = ({\r\n    closing,\r\n    velocity,\r\n  }: {\r\n    closing: boolean;\r\n    velocity?: number;\r\n  }) => {\r\n    const {\r\n      gesture,\r\n      transitionSpec,\r\n      onOpen,\r\n      onClose,\r\n      onTransitionStart,\r\n    } = this.props;\r\n\r\n    const toValue = this.getAnimateToValue({\r\n      ...this.props,\r\n      closing,\r\n    });\r\n\r\n    const spec = closing ? transitionSpec.close : transitionSpec.open;\r\n\r\n    const animation =\r\n      spec.animation === 'spring' ? Animated.spring : Animated.timing;\r\n\r\n    this.setPointerEventsEnabled(!closing);\r\n    this.handleStartInteraction();\r\n\r\n    clearTimeout(this.pendingGestureCallback);\r\n\r\n    onTransitionStart?.({ closing });\r\n    animation(gesture, {\r\n      ...spec.config,\r\n      velocity,\r\n      toValue,\r\n      useNativeDriver,\r\n      isInteraction: false,\r\n    }).start(({ finished }) => {\r\n      this.handleEndInteraction();\r\n\r\n      clearTimeout(this.pendingGestureCallback);\r\n\r\n      if (finished) {\r\n        if (closing) {\r\n          onClose();\r\n        } else {\r\n          onOpen();\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  private getAnimateToValue = ({\r\n    closing,\r\n    layout,\r\n    gestureDirection,\r\n  }: {\r\n    closing?: boolean;\r\n    layout: Layout;\r\n    gestureDirection: GestureDirection;\r\n  }) => {\r\n    if (!closing) {\r\n      return 0;\r\n    }\r\n\r\n    return getDistanceForDirection(layout, gestureDirection);\r\n  };\r\n\r\n  private setPointerEventsEnabled = (enabled: boolean) => {\r\n    const pointerEvents = enabled ? 'box-none' : 'none';\r\n\r\n    this.contentRef.current?.setNativeProps({ pointerEvents });\r\n  };\r\n\r\n  private handleStartInteraction = () => {\r\n    if (this.interactionHandle === undefined) {\r\n      this.interactionHandle = InteractionManager.createInteractionHandle();\r\n    }\r\n  };\r\n\r\n  private handleEndInteraction = () => {\r\n    if (this.interactionHandle !== undefined) {\r\n      InteractionManager.clearInteractionHandle(this.interactionHandle);\r\n      this.interactionHandle = undefined;\r\n    }\r\n  };\r\n\r\n  private handleGestureStateChange = ({\r\n    nativeEvent,\r\n  }: PanGestureHandlerGestureEvent) => {\r\n    const {\r\n      layout,\r\n      onClose,\r\n      onGestureBegin,\r\n      onGestureCanceled,\r\n      onGestureEnd,\r\n      gestureDirection,\r\n      gestureVelocityImpact,\r\n    } = this.props;\r\n\r\n    switch (nativeEvent.state) {\r\n      case GestureState.BEGAN:\r\n        this.isSwiping.setValue(TRUE);\r\n        this.handleStartInteraction();\r\n        onGestureBegin?.();\r\n        break;\r\n      case GestureState.CANCELLED: {\r\n        this.isSwiping.setValue(FALSE);\r\n        this.handleEndInteraction();\r\n\r\n        const velocity =\r\n          gestureDirection === 'vertical' ||\r\n          gestureDirection === 'vertical-inverted'\r\n            ? nativeEvent.velocityY\r\n            : nativeEvent.velocityX;\r\n\r\n        this.animate({ closing: this.props.closing, velocity });\r\n\r\n        onGestureCanceled?.();\r\n        break;\r\n      }\r\n      case GestureState.END: {\r\n        this.isSwiping.setValue(FALSE);\r\n\r\n        let distance;\r\n        let translation;\r\n        let velocity;\r\n\r\n        if (\r\n          gestureDirection === 'vertical' ||\r\n          gestureDirection === 'vertical-inverted'\r\n        ) {\r\n          distance = layout.height;\r\n          translation = nativeEvent.translationY;\r\n          velocity = nativeEvent.velocityY;\r\n        } else {\r\n          distance = layout.width;\r\n          translation = nativeEvent.translationX;\r\n          velocity = nativeEvent.velocityX;\r\n        }\r\n\r\n        const closing =\r\n          (translation + velocity * gestureVelocityImpact) *\r\n            getInvertedMultiplier(gestureDirection) >\r\n          distance / 2\r\n            ? velocity !== 0 || translation !== 0\r\n            : this.props.closing;\r\n\r\n        this.animate({ closing, velocity });\r\n\r\n        if (closing) {\r\n          // We call onClose with a delay to make sure that the animation has already started\r\n          // This will make sure that the state update caused by this doesn't affect start of animation\r\n          this.pendingGestureCallback = (setTimeout(\r\n            onClose,\r\n            32\r\n          ) as any) as number;\r\n        }\r\n\r\n        onGestureEnd?.();\r\n        break;\r\n      }\r\n    }\r\n  };\r\n\r\n  // Memoize this to avoid extra work on re-render\r\n  private getInterpolatedStyle = memoize(\r\n    (\r\n      styleInterpolator: StackCardStyleInterpolator,\r\n      index: number,\r\n      current: Animated.AnimatedInterpolation,\r\n      next: Animated.AnimatedInterpolation | undefined,\r\n      layout: Layout,\r\n      insetTop: number,\r\n      insetRight: number,\r\n      insetBottom: number,\r\n      insetLeft: number\r\n    ) =>\r\n      styleInterpolator({\r\n        index,\r\n        current: { progress: current },\r\n        next: next && { progress: next },\r\n        closing: this.isClosing,\r\n        swiping: this.isSwiping,\r\n        inverted: this.inverted,\r\n        layouts: {\r\n          screen: layout,\r\n        },\r\n        insets: {\r\n          top: insetTop,\r\n          right: insetRight,\r\n          bottom: insetBottom,\r\n          left: insetLeft,\r\n        },\r\n      })\r\n  );\r\n\r\n  // Keep track of the animation context when deps changes.\r\n  private getCardAnimationContext = memoize(\r\n    (\r\n      index: number,\r\n      current: Animated.AnimatedInterpolation,\r\n      next: Animated.AnimatedInterpolation | undefined,\r\n      layout: Layout,\r\n      insetTop: number,\r\n      insetRight: number,\r\n      insetBottom: number,\r\n      insetLeft: number\r\n    ) => ({\r\n      index,\r\n      current: { progress: current },\r\n      next: next && { progress: next },\r\n      closing: this.isClosing,\r\n      swiping: this.isSwiping,\r\n      inverted: this.inverted,\r\n      layouts: {\r\n        screen: layout,\r\n      },\r\n      insets: {\r\n        top: insetTop,\r\n        right: insetRight,\r\n        bottom: insetBottom,\r\n        left: insetLeft,\r\n      },\r\n    })\r\n  );\r\n\r\n  private gestureActivationCriteria() {\r\n    const { layout, gestureDirection, gestureResponseDistance } = this.props;\r\n\r\n    const distance =\r\n      gestureDirection === 'vertical' ||\r\n      gestureDirection === 'vertical-inverted'\r\n        ? gestureResponseDistance?.vertical !== undefined\r\n          ? gestureResponseDistance.vertical\r\n          : GESTURE_RESPONSE_DISTANCE_VERTICAL\r\n        : gestureResponseDistance?.horizontal !== undefined\r\n        ? gestureResponseDistance.horizontal\r\n        : GESTURE_RESPONSE_DISTANCE_HORIZONTAL;\r\n\r\n    if (gestureDirection === 'vertical') {\r\n      return {\r\n        maxDeltaX: 15,\r\n        minOffsetY: 5,\r\n        hitSlop: { bottom: -layout.height + distance },\r\n      };\r\n    } else if (gestureDirection === 'vertical-inverted') {\r\n      return {\r\n        maxDeltaX: 15,\r\n        minOffsetY: -5,\r\n        hitSlop: { top: -layout.height + distance },\r\n      };\r\n    } else {\r\n      const hitSlop = -layout.width + distance;\r\n      const invertedMultiplier = getInvertedMultiplier(gestureDirection);\r\n\r\n      if (invertedMultiplier === 1) {\r\n        return {\r\n          minOffsetX: 5,\r\n          maxDeltaY: 20,\r\n          hitSlop: { right: hitSlop },\r\n        };\r\n      } else {\r\n        return {\r\n          minOffsetX: -5,\r\n          maxDeltaY: 20,\r\n          hitSlop: { left: hitSlop },\r\n        };\r\n      }\r\n    }\r\n  }\r\n\r\n  private contentRef = React.createRef<View>();\r\n\r\n  render() {\r\n    const {\r\n      styleInterpolator,\r\n      index,\r\n      current,\r\n      gesture,\r\n      next,\r\n      layout,\r\n      insets,\r\n      overlay,\r\n      overlayEnabled,\r\n      shadowEnabled,\r\n      gestureEnabled,\r\n      gestureDirection,\r\n      pageOverflowEnabled,\r\n      children,\r\n      containerStyle: customContainerStyle,\r\n      contentStyle,\r\n      ...rest\r\n    } = this.props;\r\n\r\n    const interpolatedStyle = this.getInterpolatedStyle(\r\n      styleInterpolator,\r\n      index,\r\n      current,\r\n      next,\r\n      layout,\r\n      insets.top,\r\n      insets.right,\r\n      insets.bottom,\r\n      insets.left\r\n    );\r\n\r\n    const animationContext = this.getCardAnimationContext(\r\n      index,\r\n      current,\r\n      next,\r\n      layout,\r\n      insets.top,\r\n      insets.right,\r\n      insets.bottom,\r\n      insets.left\r\n    );\r\n\r\n    const {\r\n      containerStyle,\r\n      cardStyle,\r\n      overlayStyle,\r\n      shadowStyle,\r\n    } = interpolatedStyle;\r\n\r\n    const handleGestureEvent = gestureEnabled\r\n      ? Animated.event(\r\n          [\r\n            {\r\n              nativeEvent:\r\n                gestureDirection === 'vertical' ||\r\n                gestureDirection === 'vertical-inverted'\r\n                  ? { translationY: gesture }\r\n                  : { translationX: gesture },\r\n            },\r\n          ],\r\n          { useNativeDriver }\r\n        )\r\n      : undefined;\r\n\r\n    const { backgroundColor } = StyleSheet.flatten(contentStyle || {});\r\n    const isTransparent = backgroundColor\r\n      ? Color(backgroundColor).alpha() === 0\r\n      : false;\r\n\r\n    return (\r\n      <CardAnimationContext.Provider value={animationContext}>\r\n        <View pointerEvents=\"box-none\" {...rest}>\r\n          {overlayEnabled ? (\r\n            <View pointerEvents=\"box-none\" style={StyleSheet.absoluteFill}>\r\n              {overlay({ style: overlayStyle })}\r\n            </View>\r\n          ) : null}\r\n          <Animated.View\r\n            style={[styles.container, containerStyle, customContainerStyle]}\r\n            pointerEvents=\"box-none\"\r\n          >\r\n            <PanGestureHandler\r\n              enabled={layout.width !== 0 && gestureEnabled}\r\n              onGestureEvent={handleGestureEvent}\r\n              onHandlerStateChange={this.handleGestureStateChange}\r\n              {...this.gestureActivationCriteria()}\r\n            >\r\n              <Animated.View style={[styles.container, cardStyle]}>\r\n                {shadowEnabled && shadowStyle && !isTransparent ? (\r\n                  <Animated.View\r\n                    style={[\r\n                      styles.shadow,\r\n                      gestureDirection === 'horizontal'\r\n                        ? [styles.shadowHorizontal, styles.shadowLeft]\r\n                        : gestureDirection === 'horizontal-inverted'\r\n                        ? [styles.shadowHorizontal, styles.shadowRight]\r\n                        : gestureDirection === 'vertical'\r\n                        ? [styles.shadowVertical, styles.shadowTop]\r\n                        : [styles.shadowVertical, styles.shadowBottom],\r\n                      { backgroundColor },\r\n                      shadowStyle,\r\n                    ]}\r\n                    pointerEvents=\"none\"\r\n                  />\r\n                ) : null}\r\n                <CardSheet\r\n                  ref={this.contentRef}\r\n                  enabled={pageOverflowEnabled}\r\n                  layout={layout}\r\n                  style={contentStyle}\r\n                >\r\n                  {children}\r\n                </CardSheet>\r\n              </Animated.View>\r\n            </PanGestureHandler>\r\n          </Animated.View>\r\n        </View>\r\n      </CardAnimationContext.Provider>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n  },\r\n  overlay: {\r\n    flex: 1,\r\n    backgroundColor: '#000',\r\n  },\r\n  shadow: {\r\n    position: 'absolute',\r\n    shadowRadius: 5,\r\n    shadowColor: '#000',\r\n    shadowOpacity: 0.3,\r\n  },\r\n  shadowHorizontal: {\r\n    top: 0,\r\n    bottom: 0,\r\n    width: 3,\r\n    shadowOffset: { width: -1, height: 1 },\r\n  },\r\n  shadowLeft: {\r\n    left: 0,\r\n  },\r\n  shadowRight: {\r\n    right: 0,\r\n  },\r\n  shadowVertical: {\r\n    left: 0,\r\n    right: 0,\r\n    height: 3,\r\n    shadowOffset: { width: 1, height: -1 },\r\n  },\r\n  shadowTop: {\r\n    top: 0,\r\n  },\r\n  shadowBottom: {\r\n    bottom: 0,\r\n  },\r\n});\r\n"]}