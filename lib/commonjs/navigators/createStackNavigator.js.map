{"version":3,"sources":["createStackNavigator.tsx"],"names":["StackNavigator","initialRouteName","children","screenOptions","rest","defaultOptions","gestureEnabled","Platform","OS","animationEnabled","state","descriptors","navigation","StackRouter","args","React","useEffect","addListener","e","isFocused","requestAnimationFrame","index","defaultPrevented","dispatch","StackActions","popToTop","target","key"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAUA;;;;;;;;;;;;;;;;;;;;AAWA,SAASA,cAAT,OAKU;AAAA,MALc;AACtBC,IAAAA,gBADsB;AAEtBC,IAAAA,QAFsB;AAGtBC,IAAAA;AAHsB,GAKd;AAAA,MADLC,IACK;;AACR,QAAMC,cAAc,GAAG;AACrBC,IAAAA,cAAc,EAAEC,sBAASC,EAAT,KAAgB,KADX;AAErBC,IAAAA,gBAAgB,EAAEF,sBAASC,EAAT,KAAgB;AAFb,GAAvB;AAKA,QAAM;AAAEE,IAAAA,KAAF;AAASC,IAAAA,WAAT;AAAsBC,IAAAA;AAAtB,MAAqC,kCAKzCC,mBALyC,EAK5B;AACbZ,IAAAA,gBADa;AAEbC,IAAAA,QAFa;AAGbC,IAAAA,aAAa,EACX,OAAOA,aAAP,KAAyB,UAAzB,GACI,CAAC,GAAGW,IAAJ,qCACKT,cADL,GAEKF,aAAa,CAAC,GAAGW,IAAJ,CAFlB,CADJ,mCAMST,cANT,GAOSF,aAPT;AAJW,GAL4B,CAA3C;AAoBAY,EAAAA,KAAK,CAACC,SAAN,CACE,MACEJ,UAAU,CAACK,WAAX,IACAL,UAAU,CAACK,WAAX,CAAuB,UAAvB,EAAoCC,CAAD,IAAO;AACxC,UAAMC,SAAS,GAAGP,UAAU,CAACO,SAAX,EAAlB,CADwC,CAGxC;AACA;;AACAC,IAAAA,qBAAqB,CAAC,MAAM;AAC1B,UACEV,KAAK,CAACW,KAAN,GAAc,CAAd,IACAF,SADA,IAEA,CAAED,CAAD,CAAkCI,gBAHrC,EAIE;AACA;AACA;AACAV,QAAAA,UAAU,CAACW,QAAX,iCACKC,qBAAaC,QAAb,EADL;AAEEC,UAAAA,MAAM,EAAEhB,KAAK,CAACiB;AAFhB;AAID;AACF,KAboB,CAArB;AAcD,GAnBD,CAHJ,EAuBE,CAACf,UAAD,EAAaF,KAAK,CAACW,KAAnB,EAA0BX,KAAK,CAACiB,GAAhC,CAvBF;AA0BA,sBACE,oBAAC,kBAAD,eACMvB,IADN;AAEE,IAAA,KAAK,EAAEM,KAFT;AAGE,IAAA,WAAW,EAAEC,WAHf;AAIE,IAAA,UAAU,EAAEC;AAJd,KADF;AAQD;;eAEc,oCAKbZ,cALa,C","sourcesContent":["import * as React from 'react';\r\nimport { Platform } from 'react-native';\r\nimport {\r\n  useNavigationBuilder,\r\n  createNavigatorFactory,\r\n  DefaultNavigatorOptions,\r\n  EventArg,\r\n  StackRouter,\r\n  StackRouterOptions,\r\n  StackNavigationState,\r\n  StackActions,\r\n} from '@react-navigation/native';\r\nimport StackView from '../views/Stack/StackView';\r\nimport {\r\n  StackNavigationConfig,\r\n  StackNavigationOptions,\r\n  StackNavigationEventMap,\r\n} from '../types';\r\n\r\ntype Props = DefaultNavigatorOptions<StackNavigationOptions> &\r\n  StackRouterOptions &\r\n  StackNavigationConfig;\r\n\r\nfunction StackNavigator({\r\n  initialRouteName,\r\n  children,\r\n  screenOptions,\r\n  ...rest\r\n}: Props) {\r\n  const defaultOptions = {\r\n    gestureEnabled: Platform.OS === 'ios',\r\n    animationEnabled: Platform.OS !== 'web',\r\n  };\r\n\r\n  const { state, descriptors, navigation } = useNavigationBuilder<\r\n    StackNavigationState,\r\n    StackRouterOptions,\r\n    StackNavigationOptions,\r\n    StackNavigationEventMap\r\n  >(StackRouter, {\r\n    initialRouteName,\r\n    children,\r\n    screenOptions:\r\n      typeof screenOptions === 'function'\r\n        ? (...args) => ({\r\n            ...defaultOptions,\r\n            ...screenOptions(...args),\r\n          })\r\n        : {\r\n            ...defaultOptions,\r\n            ...screenOptions,\r\n          },\r\n  });\r\n\r\n  React.useEffect(\r\n    () =>\r\n      navigation.addListener &&\r\n      navigation.addListener('tabPress', (e) => {\r\n        const isFocused = navigation.isFocused();\r\n\r\n        // Run the operation in the next frame so we're sure all listeners have been run\r\n        // This is necessary to know if preventDefault() has been called\r\n        requestAnimationFrame(() => {\r\n          if (\r\n            state.index > 0 &&\r\n            isFocused &&\r\n            !(e as EventArg<'tabPress', true>).defaultPrevented\r\n          ) {\r\n            // When user taps on already focused tab and we're inside the tab,\r\n            // reset the stack to replicate native behaviour\r\n            navigation.dispatch({\r\n              ...StackActions.popToTop(),\r\n              target: state.key,\r\n            });\r\n          }\r\n        });\r\n      }),\r\n    [navigation, state.index, state.key]\r\n  );\r\n\r\n  return (\r\n    <StackView\r\n      {...rest}\r\n      state={state}\r\n      descriptors={descriptors}\r\n      navigation={navigation}\r\n    />\r\n  );\r\n}\r\n\r\nexport default createNavigatorFactory<\r\n  StackNavigationState,\r\n  StackNavigationOptions,\r\n  StackNavigationEventMap,\r\n  typeof StackNavigator\r\n>(StackNavigator);\r\n"]}